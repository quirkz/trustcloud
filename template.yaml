AWSTemplateFormatVersion: '2010-09-09'

Transform: AWS::Serverless-2016-10-31

Description: 'slack bot'

Resources:  
  BrainTrustApi:
    Type: 'AWS::ApiGateway::RestApi'
    Properties:
      Description: Brain Trust API
      Name: BrainTrustApi

  BrainTrustApiRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - 'lambda.amazonaws.com'
                - 'apigateway.amazonaws.com'
            Action: "sts:AssumeRole"
      Path: "/"
      Policies:
        - PolicyName: BrainTrustApiPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "lambda:InvokeFunction"
                Resource: "*"

  ProxyResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref BrainTrustApi
      ParentId: !GetAtt BrainTrustApi.RootResourceId
      PathPart: '{proxy+}'

  ProxyResourceToLambda:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      RestApiId: !Ref BrainTrustApi
      ResourceId: !Ref ProxyResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Credentials: !GetAtt BrainTrustApiRole.Arn
        Uri: !Sub >-
          arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${FunctionSlackBot.Arn}/invocations

  TopicSlack:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: "braintrust-slack"
      Subscription:
        - Endpoint: !GetAtt FunctionSendSlackMessage.Arn
          Protocol: lambda

  TopicPolicySlack:
    Type: AWS::SNS::TopicPolicy
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            AWS:
            - !Sub 'arn:aws:iam::${AWS::AccountId}:root'
          Action: sns:Publish
          Resource: "*"
      Topics:
      - !Ref TopicSlack


  FunctionSlackBot:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: slackbot/
      Handler: app.handler
      Runtime: nodejs12.x
      Role: !GetAtt BrainTrustApiRole.Arn
      Timeout: 60
  PermissionSlackBotMessage:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt FunctionSlackBot.Arn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceAccount: !Ref 'AWS::AccountId'

  FunctionSendSlackMessage:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: sendsns/
      Handler: app.lambdaHandler
      Runtime: nodejs12.x
      Role: !GetAtt RoleSlackBot.Arn
      Timeout: 60  
  PermissionSendSlackMessage:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt FunctionSendSlackMessage.Arn
      Principal: sns.amazonaws.com
      SourceArn: !Sub arn:aws:sns:${AWS::Region}:${AWS::AccountId}:braintrust-slack

  RoleSlackBot:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service:
              - lambda.amazonaws.com
              - apigateway.amazonaws.com
          Action: sts:AssumeRole
      Policies:
        - PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action: logs:*
                Effect: Allow
                Resource: arn:aws:logs:*:*:*
          PolicyName: lambda
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
